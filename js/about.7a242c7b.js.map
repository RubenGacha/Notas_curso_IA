{"version":3,"file":"js/about.7a242c7b.js","mappings":"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","sources":["webpack://plantilla/./src/views/AboutView.vue","webpack://plantilla/./src/views/AboutView.vue?d56f","webpack://plantilla/./src/views/busqueda_grafos/introduccion.vue","webpack://plantilla/./src/views/busqueda_grafos/introduccion.vue?f09f","webpack://plantilla/./src/views/conocimientos_basicos/agentes_inteligentes.vue","webpack://plantilla/./src/views/conocimientos_basicos/agentes_inteligentes.vue?452a","webpack://plantilla/./src/views/conocimientos_basicos/complejidad_tratabilidad.vue","webpack://plantilla/./src/views/conocimientos_basicos/complejidad_tratabilidad.vue?c657","webpack://plantilla/./src/views/conocimientos_basicos/lenguajes_programacion.vue","webpack://plantilla/./src/views/conocimientos_basicos/lenguajes_programacion.vue?3f27","webpack://plantilla/./src/views/conocimientos_basicos/presentacion.vue","webpack://plantilla/./src/views/conocimientos_basicos/presentacion.vue?b22b","webpack://plantilla/./src/views/conocimientos_basicos/razonamiento_aprendizaje.vue","webpack://plantilla/./src/views/conocimientos_basicos/razonamiento_aprendizaje.vue?6f1f","webpack://plantilla/./src/views/conocimientos_basicos/regex.vue","webpack://plantilla/./src/views/conocimientos_basicos/regex.vue?87b5","webpack://plantilla/./src/views/logica/introduccion.vue","webpack://plantilla/./src/views/logica/introduccion.vue?713a","webpack://plantilla/./src/views/probabilidad/introduccion.vue","webpack://plantilla/./src/views/probabilidad/introduccion.vue?ae39"],"sourcesContent":["<template>\n  <div class=\"about\">\n    <h1>This is an about page</h1>\n    <pre v-highlightjs><code class=\"javascript\">const s = new Date().toString()</code></pre>\n\n    <math-jax latex=\"\\prec\" />\n  </div>\n</template>\n","import { render } from \"./AboutView.vue?vue&type=template&id=999a060a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div id=\"cuerpo\">\r\n        <h1>Busqueda Grafos</h1>\r\n        \r\n        <h2>Planificacion</h2>\r\n\r\n        <h3>Busqueda no informada</h3>\r\n\r\n        <ul>\r\n            <li>Busqueda en Anchura</li>\r\n            <li>Busqueda en Anchura de Costo Uniforme</li>\r\n            <li>Busqueda en Profundidad</li>\r\n            <li>Busqueda en profundidad limitada</li>\r\n            <li>Busqueda en profundidad Iterativa</li>\r\n            <li>Busqueda bidireccional</li>\r\n            <li>Busqueda en Grafos</li>\r\n        </ul>\r\n\r\n        <h3>Busqueda informada</h3>\r\n\r\n        <ul>\r\n            <li>heuristicas</li>\r\n            <li>Busqueda voraz primero el mejor</li>\r\n            <li>Busquedas A* y AO * (estrella)</li>\r\n            <li>Busqueda de Ascension de Colinas</li>\r\n            <li>Busqueda Tabu</li>\r\n            <li>Busqueda de Temple Simulado</li>\r\n            <li>Busqueda de Haz local</li>\r\n            <li>Algoritmos geneticos</li>\r\n            <li>Busqueda Online</li>\r\n        </ul>\r\n\r\n        <h3>Satisfaccion de restricciones</h3>\r\n        <ul>\r\n            <li>Problemas de satisfaccion de restricciones</li>\r\n            <li>Busqueda de vuelta atras</li>\r\n            <li>Comprobacion hacia Delante</li>\r\n            <li>Propagacion de restricciones</li>\r\n            <li>Salto Atras Dirigido por conflictos</li>\r\n            <li>Busqueda Local: minimos-conflictos</li>\r\n            <li>Acondicionamiento del corte</li>\r\n        </ul>\r\n        <h2>Juegos</h2>\r\n        <ul>\r\n            <li>Teoria de juegos</li>\r\n            <li>minimax</li>\r\n            <li>poda Alfa-Beta</li>\r\n            <li>Funcion de evaluacion</li>\r\n            <li>Corte de busqueda: efecto horizonte</li>\r\n            <li>posibilidad:minimaxEsperado</li>\r\n        </ul>\r\n        <h2>Utilidad y toma de decisiones</h2>\r\n        <ul>\r\n            <li>Teoria de la utilidad: funcion de utilidad</li>\r\n            <li>Redes de decision</li>\r\n            <li>Valor de la informacion</li>\r\n            <li>Iteracion de Valores</li>\r\n            <li>Iteracion de Politicas</li>\r\n            <li>Proceso de Desicion de markov(MDP)</li>\r\n            <li>MDP parcialmente Observable (POMDP)</li>\r\n            <li>Red bayesiana Dinamica</li>\r\n            <li>Teoria de Juegos: Equilibrios y Mecanismos</li>\r\n        </ul>\r\n        <h2>Aprendizaje por refuerzo</h2>\r\n        <ul>\r\n            <li>Aprendizaje por refuerzo pasivo</li>\r\n            <li>Aprendizaje por refuerzo activo</li>\r\n            <li>Q-learning</li>\r\n            <li>Exploracion y Exploracion</li>\r\n            <li>Busqueda de la politica</li>\r\n        </ul>\r\n    </div>\r\n</template>","import { render } from \"./introduccion.vue?vue&type=template&id=742a1037\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div id=\"cuerpo\">\r\n        <h1>Agentes Inteligentes</h1>\r\n\r\n        <p>Los agentes Inteligentes son entes que logran percibir su entorno mediante sensores y actua sobre el mismo\r\n            mediante actuadores.</p>\r\n\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\"></th>\r\n                <th scope=\"col\">Sensores</th>\r\n                <th scope=\"col\">Actuadores</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">Humanos</td>\r\n                <td scope=\"row\">Ojos, Oidos, Nariz, Boca, Piel </td>\r\n                <td scope=\"row\">Manos, Pies, Cuerdas Vocales </td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">Robots</td>\r\n                <td scope=\"row\">Camaras, Infrarrojos, Laseres, Sonares, Sensores de presion</td>\r\n                <td scope=\"row\">Motores, Brazos mecanicos, Pinzas, Altavoces.</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">Software</td>\r\n                <td scope=\"row\">Pulsaciones de teclado, contenido de archivos, datos de red recibidos,etc. </td>\r\n                <td scope=\"row\">pantallas, archivos de salida, Datos de red enviados, etc</td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>Percepcion</h2>\r\n        <p>la percepcion es la capacidad de recibir informacion del entorno, con esto el agente puede tomar acciones en\r\n            cualquier instante, aunque esto dependera de la secuencia de percepciones observada hasta ese momento.</p>\r\n\r\n        <p>para aclarar la secuencia de percepciones son la historia completa de los datos que ha percibido el agente\r\n            durante un tiempo. se guardan en una memoria.</p>\r\n\r\n        <img src=\"@\\assets\\imagenes\\conocimientos_basicos\\agente.svg\" alt=\"Forma en que funciona un agente\">\r\n\r\n        <h2>Funcion de Agente</h2>\r\n\r\n        <p>Se encarga de elegir una accion a partir de una secuencia de percepciones que se pueden visualizar en una\r\n            tabla, en la que se puede encontrar las diferentes percepciones junto a la accion a realizar, al mismo\r\n            tiempo se tiene una combinacion de las posibles percepciones que se tengan.</p>\r\n\r\n        <p>El caso ideal es que se tenga una accion para cada conjunto de percepciones que pueda tener nuestro agente.\r\n        </p>\r\n\r\n        <h2>Medidas de Rendimiento</h2>\r\n\r\n        <dl>\r\n            <dt>Perfeccion</dt>\r\n            <dd>Si el agente conoce todos los resultados reales de sus acciones y puede actuar siempre de la mejor forma\r\n                posible (omnisciencia). Maximiza el rendimiento real. nota: \"En el mundo real, es imposible\"</dd>\r\n\r\n            <dt>Racionalidad</dt>\r\n            <dd>Para cada secuencia de percepciones posibles, se selecciona la accion que supuestamente maximiza el\r\n                rendimiento esperado.</dd>\r\n        </dl>\r\n\r\n        <h2>Aprendizaje</h2>\r\n\r\n        <p>Debido a que un agente no puede ser omnisciente, se debe percibir y aprender para poder maximizar el\r\n            rendimiento en otras palabras debe tener una memoria, para esto debe explorar en busqueda de recopilacion de\r\n            informacion, realizando acciones con la intencion de modificar percepciones futuras y memorizando el\r\n            resultado </p>\r\n\r\n        <h2>Autonomia</h2>\r\n        <p>Un agente racional debe poder aprender todo lo que pueda para compensar la falta de conocimiento que posee a\r\n            priori. Si no posee ningun conocimiento inicial, debe actuar de forma aleatoria.</p>\r\n\r\n        <p>A un agente racional hay que dotarlo de un conocimiento inicial y las capacidades de explorar y aprender</p>\r\n\r\n        <h2>Entorno de trabajo</h2>\r\n\r\n        <p>El entorno de trabajo son problemas del mundo real para los que los agentes racionales son las soluciones.\r\n            este entorno de trabajo esta compuesto por cuatro componentes que son rendimiento, entorno, actuadores y\r\n            sensores. estos cuatro componentes forman la palabra <em class=\"enfasis\">REAS</em> que es la inicial de cada\r\n            palabra.</p>\r\n\r\n        <p>El siguiente es un ejemplo de entorno de trabajo de un taxista.</p>\r\n\r\n        <ul>\r\n            <li><em>Entorno de trabajo</em> taxista</li>\r\n            <li><em>Rendimiento</em> seguro, rapido, legal, confortables</li>\r\n            <li><em>Entorno: </em> carreteras , trafico, peatones, clientes</li>\r\n            <li><em>Actuadores: </em> direccion, acelerador, freno, claxon.</li>\r\n            <li><em>Sensores: </em> Camaras, velocimetro, sensores termicos.</li>\r\n        </ul>\r\n\r\n        <h2>Propiedades</h2>\r\n\r\n        <p>los entornos de trabajo tienen una serie de propiedades las cuales se pueden adaptar a un algoritmo o a otro\r\n        </p>\r\n\r\n        <dl>\r\n            <dt>Total o Parcialmente observable</dt>\r\n            <dd>Se refiere al nivel que se logra percibir del entorno ejemplo en un juego de ajedrez seria total,\r\n                mientras en un juego de cartas seria parcial ya que no puede conocer las cartas que tiene el oponente.\r\n            </dd>\r\n            <dt>Agente Individual o Multiagente</dt>\r\n            <dd>Se refiere a la cantidad de agentes que se involucran en el entorno, estos pueden comunicarse, cooperar\r\n                o competir entre ellos. esto depende del entorno ejemplo un juego de monopolio todos compiten entre\r\n                ellos pero pueden negociar y buscar un mayor beneficio.</dd>\r\n            <dt>Determinista o Estocastico</dt>\r\n            <dd>Se trata en que sucede cuando se realiza una determinada accion, cuando no depende de algo esterno y\r\n                siempre la misma accion genera el mismo resultado se llama <em>determinista</em>, pero si depende de\r\n                algo mas y no se tiene sertesa por ende se deja en manos de la probabilidad se llama\r\n                <em>estocastico</em>\r\n            </dd>\r\n            <dt>Episodico o Secuencial</dt>\r\n            <dd>Se trata en que afecta las acciones tomadas con la siguientes acciones si no se genera una afectacion se\r\n                llama <em>episodico</em> mientras si se genera una afectacion a la siguiente accion se llama\r\n                <em>secuencial</em>\r\n            </dd>\r\n            <dt>Estatico o Dinamico</dt>\r\n            <dd>Se trata si el entorno cambia mientras el agente procesa la accion a ejecutar. cuando cambia se llama\r\n                <em>dinamico</em> mientras si se mantiene se le denomina <em>estatico</em>\r\n            </dd>\r\n            <dt>Discreto o Continuo</dt>\r\n            <dd>hace referencia al tipo de dato que maneja el agente, el <em>discreto</em> indica que tienen valores\r\n                enteros, mientras que los <em>continuos</em> hacen referencia a numeros reales.</dd>\r\n            <dt>Conocido o Desconocido</dt>\r\n            <dd>hace referencia a las leyes que se aplican en el entorno cuando se conoce se llama <em>conocido</em>\r\n                mientras si no las conocen se llama <em>desconocido</em></dd>\r\n        </dl>\r\n        <h2>Tipos de Agentes</h2>\r\n\r\n        <p>Inicialmente para conocer los tipos de agente debemos conocer cual es el agente ideal el cual seria el agente\r\n            tabla este conoce todas las acciones y las percepciones, teniendolas almacenadas en una tabla. lo siguiente\r\n            seria el seudocodigo</p>\r\n\r\n        <pre v-highlightjs><code class=\"plaintext\"><em class=\"clave\">funcion</em> <em class=\"cambiar\">AGENTE_TABLA</em>(percepcion) <em class=\"clave\">devuelve</em> accion\r\n    <em class=\"clave\">datos</em>: \r\n        percepciones    <em class=\"comentario\">#secuencia, inicialmente vacia.</em>\r\n        acciones        <em class=\"comentario\">#tabla indexada por percepciones totalmente especificada.</em>\r\n    percepciones.agregar(percepcion)\r\n    accion=acciones.buscar(percepciones)\r\n    <em class=\"clave\">devolver</em> accion\r\n    </code></pre>\r\n\r\n        <pre v-highlightjs><code class=\"python\">\r\n\"\"\"\r\naqui se encuentra la tabla donde van todas las acciones posibles.\r\naunque como se puede ver es muy dificil tener una tabla con todas las acciones,\r\nya que se debe validar cualquier conbinacion posible.\r\n\r\npor ejemplo que ingresen un codigo antes de una moneda o que ingresen mas de una moneda. \r\nel problema es exponencial a medida que se permitan mas percepciones,\r\nmas conbinaciones posibles existen.\r\n\"\"\"\r\n\r\n#-------------------------tabla---------------------------------\r\nACCIONES = {\r\n    'moneda': 'pedir-codigo',\r\n    'moneda,a1': 'servir-bebida1',\r\n    'moneda,a2': 'servir-bebida2',\r\n    'moneda,a3': 'servir-bebida3',\r\n    'moneda,a1,moneda': 'pedir-codigo',\r\n    'moneda,a2,moneda': 'pedir-codigo',\r\n    'moneda,a3,moneda': 'pedir-codigo',\r\n    'moneda,a1,moneda,a1': 'servir-bebida1',\r\n    'moneda,a1,moneda,a2': 'servir-bebida2',\r\n    'moneda,a1,moneda,a3': 'servir-bebida3',\r\n    'moneda,a2,moneda,a1': 'servir-bebida1',\r\n    'moneda,a2,moneda,a2': 'servir-bebida2',\r\n    'moneda,a2,moneda,a3': 'servir-bebida3',\r\n    'moneda,a3,moneda,a1': 'servir-bebida1',\r\n    'moneda,a3,moneda,a2': 'servir-bebida2',\r\n    'moneda,a3,moneda,a3': 'servir-bebida3',\r\n}\r\n\r\n#--------------------------------agente-----------------------------\r\nclass AgenteTabla:\r\n    \"\"\"Agente racional de tipo tabla\"\"\"\r\n\r\n    def __init__(self, acciones) -> None:\r\n        self.acciones = acciones\r\n        self.percepciones = \"\"\r\n\r\n    def actuar(self, percepcion, accion_basica=''):\r\n        \"\"\"Actua segun la percepcion, devolviendo accion\"\"\"\r\n        if not percepcion:\r\n            return accion_basica\r\n\r\n        if len(self.percepciones) != 0:\r\n            self.percepciones += \",\"\r\n\r\n        self.percepciones += percepcion\r\n\r\n        if self.percepciones in self.acciones.keys():\r\n            return self.acciones[self.percepciones]\r\n        else:\r\n            self.percepciones = ''\r\n            return accion_basica\r\n\r\n#-------------------- uso del agente ----------------------\r\n\r\nprint(\"---Agente tabla: Maquina Expendedora --\")\r\n\r\nexpendedora = AgenteTabla(ACCIONES)\r\n\r\npercepcion = input(\"Indicar Percepcion: \")\r\nwhile percepcion:\r\n    accion = expendedora.actuar(percepcion, 'reiniciarse')\r\n    print(accion)\r\n    percepcion = input(\"Indicar Percepcion: \")\r\n\r\n    </code></pre>\r\n\r\n        <p>teniendo el seudocodigo presente los siguientes son los tipos de agente.</p>\r\n\r\n        <h3>Agentes Reactivos</h3>\r\n\r\n        <p>son los que actuan segun percepciones sin considerar las consecuencias de sus actos, es decir, no le importa\r\n            que suceda en el entorno.</p>\r\n\r\n        <h4>Agentes Reactivos Simple</h4>\r\n        <p>Solo tiene en cuenta la percepcion actual, no posee una histora de percepciones (actos reflejo) usa reglas\r\n            condicion-accion (si-entonces) en vez de una tabla</p>\r\n\r\n        <pre v-highlightjs><code class=\"plaintext\"><em class=\"clave\">funcion</em> <em class=\"cambiar\">AGENTE_REACTIVO_SIMPLE</em>(percepcion) <em class=\"clave\">devuelve</em> accion\r\n    <em class=\"clave\">datos</em>: reglas    <em class=\"comentario\">#conjunto de reglas si - entonces</em>\r\n    estado = <em class=\"clave\">INTERPRETAR_ENTRADA</em>(percepcion)\r\n    regla=reglas.buscar(estado)\r\n    accion=regla.accion\r\n    <em class=\"clave\">devolver</em> accion\r\n    </code></pre>\r\n\r\n        <pre v-highlightjs><code class=\"python\">\r\n\r\n#-------------------------reglas---------------------------------\r\nREGLAS = {\r\n    'moneda': 'pedir-codigo',\r\n    'a1': 'servir-bebida1',\r\n    'a2': 'servir-bebida2',\r\n    'a3': 'servir-bebida3',\r\n}\r\n\r\n#-------------------------agente---------------------------------\r\nclass AgenteReactivoSimple:\r\n    \"\"\"Agente racional de tipo Reactivo Simple\"\"\"\r\n\r\n    def __init__(self, reglas) -> None:\r\n        self.reglas = reglas\r\n\r\n    def actuar(self, percepcion, accion_basica=''):\r\n        \"\"\"Actua segun la percepcion, devolviendo accion\"\"\"\r\n        if not percepcion:\r\n            return accion_basica\r\n\r\n        if percepcion in self.reglas.keys():\r\n            return self.reglas[percepcion]\r\n        else:\r\n            return accion_basica\r\n\r\n#-------------------------uso---------------------------------\r\nprint(\"---Agente Reactivo Simple: Maquina Expendedora --\")\r\n\r\nexpendedora = AgenteReactivoSimple(REGLAS)\r\n\r\npercepcion = input(\"Indicar Percepcion: \")\r\nwhile percepcion:\r\n    accion = expendedora.actuar(percepcion, 'reiniciarse')\r\n    print(accion)\r\n    percepcion = input(\"Indicar Percepcion: \")\r\n\r\n    </code></pre>\r\n\r\n        <h4>Agentes Basado en Modelos</h4>\r\n\r\n        <p>almacena informacion de la parte del mundo que ha visitado (memoria). mantiene un estado interno y un modelo\r\n            del mundo segun secuencia de percepciones</p>\r\n\r\n        <pre v-highlightjs><code class=\"plaintext\"><em class=\"clave\">funcion</em> <em class=\"cambiar\">AGENTE_BASADO_MODELOS</em>(percepcion) <em class=\"clave\">devuelve</em> accion\r\n    <em class=\"clave\">datos</em>:\r\n        estado    <em class=\"comentario\">#Descripcion actual del mundo.</em>\r\n        modelo    <em class=\"comentario\">#Dado estado y accion, devuelve nuevo estado.</em>\r\n        reglas    <em class=\"comentario\">#Conjunto de reglas si - entonces</em>\r\n        accion    <em class=\"comentario\">#Ultima accion realizara (ninguna inicialmente)</em>\r\n    estado = <em class=\"clave\">ACTUALIZAR_ESTADO</em>(estado, accion, percepcion, modelo)\r\n    regla=reglas.buscar(estado)\r\n    accion=regla.accion\r\n    <em class=\"clave\">devolver</em> accion\r\n    </code></pre>\r\n\r\n        <pre v-highlightjs><code class=\"python\">\r\n#Estados: sin-moneda, con-moneda,a1-servida,a2-servida,a3-servida\r\n#Acciones: pedir-moneda, pedir-codigo,esperar.\r\n#Percepciones: moneda,a1,a2,a3,servida.\r\n\r\n\r\n\r\nREGLAS = {\r\n    'sin-moneda':'pedir-moneda',\r\n    'con-moneda':'pedir-codigo',\r\n    'a1-servida':'esperar',\r\n    'a2-servida':'esperar',\r\n    'a3-servida':'esperar'\r\n}\r\n#el modelo hace el cambio de estado pasando por un estado inicial, realizando la accion de ese estado \r\n#y esperando a que la percepcion esperada para ese estado nos permite cambiar al siguiente estado.\r\nMODELO ={\r\n    ('sin-moneda','pedir-moneda','moneda'):'con-moneda',\r\n    ('con-moneda','pedir-codigo','a1'):'a1-servida',\r\n    ('con-moneda','pedir-codigo','a2'):'a2-servida',\r\n    ('con-moneda','pedir-codigo','a3'):'a3-servida',\r\n    ('a1-servida','esperar','servida'):'sin-moneda',\r\n    ('a2-servida','esperar','servida'):'sin-moneda',\r\n    ('a3-servida','esperar','servida'):'sin-moneda',\r\n}\r\nclass AgenteReactivoBasadoModelo:\r\n    \"\"\"Agente racional de tipo Reactivo basado en Modelo.\"\"\"\r\n\r\n    def __init__(self, modelo, reglas,estado_inicial='',accion_inicial='') -> None:\r\n        self.modelo = modelo\r\n        self.reglas = reglas\r\n        self.estado_inicial = estado_inicial\r\n        self.accion_inicial = accion_inicial\r\n        self.accion=None\r\n        self.estado=self.estado_inicial\r\n        self.ult_accion=self.accion_inicial\r\n        \r\n\r\n    def actuar(self, percepcion):\r\n        \"\"\"Actua segun la percepcion, devolviendo accion\"\"\"\r\n        if not percepcion:\r\n            return self.accion_inicial\r\n\r\n        clave=(self.estado,self.ult_accion,percepcion)\r\n        if clave not in self.modelo.keys():\r\n            self.estado=self.estado_inicial\r\n            self.accion=None\r\n            self.ult_accion=self.accion_inicial\r\n            return self.accion_inicial \r\n        else:\r\n            self.estado=self.modelo[clave]\r\n            if self.estado not in self.reglas.keys():\r\n                self.accion=None\r\n                self.estado=self.estado_inicial\r\n                self.ult_accion=self.accion_inicial\r\n                return self.accion_inicial\r\n            else:\r\n                accion=self.reglas[self.estado]\r\n                self.ult_accion=accion\r\n                return accion\r\n\r\n\r\nprint(\"---Agente Reactivo Basado en Modelos: Maquina Expendedora --\")\r\n\r\nexpendedora = AgenteReactivoBasadoModelo(MODELO,REGLAS,'sin-moneda','pedir-moneda')\r\n\r\npercepcion = input(\"Indicar Percepcion: \")\r\nwhile percepcion:\r\n    accion = expendedora.actuar(percepcion)\r\n    print(accion)\r\n    percepcion = input(\"Indicar Percepcion: \")\r\n\r\n</code></pre>\r\n\r\n        <h3>Agentes que planifican</h3>\r\n\r\n        <p>Son los agentes que piensa en las consecuencias de sus actos (realiza simulaciones), es decir, segun como\r\n            podria ser el entorno tras sus acciones</p>\r\n\r\n        <h4>Agentes basados en Objetivos</h4>\r\n\r\n        <p>Aparte del estado interno y del modelo del mundo, el agente escoge la accion que le permita alcanzar un\r\n            objetivo</p>\r\n\r\n        <h4>Agentes basados en Utilidad</h4>\r\n\r\n        <p>Cuando existen varias formas de lograr un objetivo, o cuando existen varios objetivos, se comparan en funcion\r\n            de su utilidad. El agente escogera la accion mas util</p>\r\n\r\n        <p>Si existe incertidumbre, se habla de utilidad esperada, que es la suma ponderada de las utilidades de cada\r\n            resultado segun su probabilidad:</p>\r\n\r\n        <p>donde u es igual a la utilidad por p que es la probabilidad que ocurra mas el valor de las acciones\r\n            subsiguientes</p>\r\n\r\n        <math-jax latex=\"U=u_{1}p_{1}+u_{2}p_{2}+\\cdots +u_{n}p_{n}\" />\r\n\r\n        <h3>Agentes que aprenden</h3>\r\n\r\n        <p>Aprende a partir de la secuencia de percepciones y de las consecuencias de las acciones realizadas se compone\r\n            de 4 elementos:</p>\r\n        <dl>\r\n            <dt>Elemento de Actuacion</dt>\r\n            <dd>un agente de los anteriores</dd>\r\n\r\n            <dt>Elemento de Aprendizaje</dt>\r\n            <dd>mejora al agente</dd>\r\n\r\n            <dt>Critica</dt>\r\n            <dd>recompensa o penalizacion</dd>\r\n\r\n            <dt>Generador de problemas</dt>\r\n            <dd>Incita a la exploracion</dd>\r\n        </dl>\r\n\r\n        <h2>Representacion del Entorno</h2>\r\n\r\n        <p>Estructura de datos para representar el entorno en el que habita el agente (estado, modelo, acciones, etc.)\r\n            se pueden agrupar en los siguientes grupos</p>\r\n\r\n        <ul>\r\n            <li><em>Atomico:</em> sin estructura interna (dato simple). y se suele usar en busquedas, juegos, modelos\r\n                ocultos de markov, procesos de decision de markov</li>\r\n            <li><em>Factorizado:</em> vector con pares atributo-valor. se suele ver en satisfaccion de restricciones,\r\n                logica proposicional, planificacion, redes bayesianas</li>\r\n            <li><em>Estructurado:</em> objetos con atributos y relaciones con otros objetos (OOP). se usa en BD\r\n                relacionales, logica del 1<sup>er</sup> orden razonamiento, aprendizaje, lenguaje natural.</li>\r\n        </ul>\r\n\r\n        <div class=\"importante\">Cuanto mas expresiva es una representacion, menos espacio ocupa pero mas complejo es el\r\n            razonamiento y el aprendizaje</div>\r\n\r\n\r\n    </div>\r\n</template>","import { render } from \"./agentes_inteligentes.vue?vue&type=template&id=39d939da\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div id=\"cuerpo\">\r\n    <h1>Complejidad y Tratabilidad</h1>\r\n    <p>El factor mas predominante que delimita lo que se puede resolver en un tiempo razonable de lo que no lo es suele ser el <em class=\"enfasis\">algoritmo</em> elegido para resolver el problema y no la potencia de calculo.</p>\r\n\r\n    <p>El programador es responsable de usar los recursos del computador de la forma mas eficiente posible.</p>\r\n\r\n    <h2>Factores que influyen en la eficiencia del algoritmo</h2>\r\n\r\n    <dl>\r\n        <dt>El tamaño</dt>\r\n        <dd>hace referencia a la cantidad de datos de entrada</dd>\r\n        <dt>El contenido</dt>\r\n        <dd>Hace referencia a que datos estamos tratando estos pueden hacer oscilar la eficiencia del algoritmo entre el valor minimo y el valor maximo</dd>\r\n        <dt>El computador</dt>\r\n        <dd>Se refiere al procesamiento que puede usar el algoritmo.</dd>\r\n    </dl>\r\n\r\n    <h2>Casos al momento de analizar un algoritmo</h2>\r\n    <dl>\r\n        <dt>Mejor caso</dt>\r\n        <dd>analisis con los datos de entrada que hacen que el algoritmo tarde menos tiempo. aporta el limite minimo.</dd>\r\n\r\n        <dt>Peor caso</dt>\r\n        <dd>analisis con los datos de entrada que hacen que el algoritmo tarde mas tiempo. aporta el limite maximo y es el mas critico y mas importante.</dd>\r\n\r\n        <dt>Caso Promedio</dt>\r\n        <dd>analisis con los datos de entrada que se dan con mayor frecuencia. es mas realista pero es el mas complejo de calcular analiticamente aunque se puede aproximar experimentalmente.</dd>\r\n    </dl>\r\n\r\n    <h2>Criterio Asintotico</h2>\r\n    <p><em class=\"enfasis\">Se ignorara al computador y al compilador.</em></p>\r\n\r\n    <ul>\r\n        <li>Analisis independiente de la maquina y el lenguaje. un programa tan solo es una implementacion concreta de un algoritmo.</li>\r\n        <li>Para tamaños suficientemente grandes, el tiempo de ejecucion depende mas del algoritmo que de la maquina o el lenguaje. Diferentes implementaciones solo se diferencian en una constante multiplicativa.</li>\r\n        <li>El analisis se realizara tanto en tiempo como en espacio(memoria utilizada.) son contrapuestos</li>\r\n    </ul>\r\n\r\n    <h2>Complejidad Asintotica</h2>\r\n\r\n    <p>tambien llamadas <em class=\"enfasis\">Notacion asintotica, analisis asintotico o criterio Asintotico</em></p>\r\n\r\n    <p>Asignar un orden de complejidad a cada algoritmo solo segun el tamaño de su problema(tamaño de los datos de entrada).</p>\r\n\r\n    <p>Ejemplos: longitud de un vector, cantidad de elementos de una coleccion, longitud de un fichero, dimensiones de una matriz, magnitud de los numeros, etc.</p>\r\n\r\n    <h2>Calculo de la eficiencia</h2>\r\n    <p>A cada instruccion de un algoritmo se le asigna un coste.</p>\r\n    <dl>\r\n        <dt>Instruccion basica</dt>\r\n        <dd>Que no depende del ta del problema(asignacion, I/O,etc.): Coste costante</dd>\r\n\r\n        <dt>Secuencia de instrucciones</dt>\r\n        <dd>el coste sera el de la instruccion conste maximo (alternativa: suma).</dd>\r\n\r\n        <dt>Condicionales</dt>\r\n        <dd>de las dos opciones, la que tenga mayor coste.</dd>\r\n\r\n        <dt>Iteraciones</dt>\r\n        <dd>Se multiplica el numero maximo de iteraciones por el coste del bucle.</dd>\r\n\r\n        <dt>Instruccion critica</dt>\r\n        <dd>Instruccion que mas veces se repite dentro de un programa, para tamaños de programa suficientemente grandes, el resto del programa perdera importancia frente al coste de repetir la instruccion critica, por muy elemental que sea.</dd>\r\n    </dl>\r\n\r\n    <pre v-highlightjs><code class=\"plaintext\"><em class=\"clave\">funcion</em> <em class=\"cambiar\">EJEMPLO</em>(problema) <em class=\"clave\">devuelve</em> resultado <em class=\"comentario\">#-------------f(n<sup>2</sup>)------------------</em>\r\n\r\n    variable=valor <em class=\"comentario\"># f(1)  </em>\r\n    resultado=invocar-metodo(problema) <em class=\"comentario\"># f(n)</em>\r\n    si resultado == 0 entonces <em class=\"comentario\">#----------f(n<sup>2</sup>)------</em>\r\n        mostrar-error-pantalla() <em class=\"comentario\"># f(1)</em>\r\n    si no\r\n        por cada elemento en resultado <em class=\"comentario\">#------f(n*n) = f(n<sup>2</sup>)</em>\r\n            otra = metodo(elemento) <em class=\"comentario\"># f(1)</em>\r\n            variable=variable+1 <em class=\"comentario\"># f(1)</em>\r\n            si otra > variable entonces <em class=\"comentario\">#------f(n)</em>\r\n                mostrar-aviso-pantalla() <em class=\"comentario\"># f(1)</em>\r\n            si no\r\n                otro-metodo(otra) <em class=\"comentario\"># f(n)</em>\r\n\r\n    <em class=\"clave\">devolver</em> resultado\r\n    </code></pre>\r\n    <h3>Matices</h3>\r\n    <ul>\r\n        <li>Con constantes multiplicativas muy grandes, para problemas con tamaños pequeños, es mejor usar algoritmos mas ineficientes.</li>\r\n        <li>Para funciones que se van a usar pocas veces, no importa usar algoritmos mas ineficientes si son mas rapidos de desarrollar y mantener</li>\r\n        <li>la ganancia en tiempo suele ser a costa del uso del espacio ocupado. la memoria es un recurso muy limitante, mas que el tiempo, luego hay que buscar un equilibrio.</li>\r\n    </ul>\r\n\r\n    <h3>Ordenes de complejidad</h3>\r\n\r\n    <p>De menor coste al mayor coste.</p>\r\n    <table class=\"table table-dark table-striped table-hover\">\r\n        <tr>\r\n            <th scope=\"col\">Codigo</th>\r\n            <th scope=\"col\">Descripccion</th>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(1)</td>\r\n            <td scope=\"row\">Orden Constante</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(log(n))</td>\r\n            <td scope=\"row\">Orden Logaritmico</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n)</td>\r\n            <td scope=\"row\">Orden Lineal</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n)</td>\r\n            <td scope=\"row\">Orden Lineal</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n*log(n))</td>\r\n            <td scope=\"row\">Orden N-Logaritmico</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n<sup>2</sup>)</td>\r\n            <td scope=\"row\">Orden Cuadratico</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n<sup>a</sup>)</td>\r\n            <td scope=\"row\">Orden polinomico</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(a<sup>n</sup>)</td>\r\n            <td scope=\"row\">Orden Exponencial</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(a!)</td>\r\n            <td scope=\"row\">Orden Factorial</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">O(n<sup>n</sup>)</td>\r\n            <td scope=\"row\">Orden Potencial-Exponencial</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <h3>Tratabilidad</h3>\r\n    <dl>\r\n        <dt>Problemas Indecidibles</dt>\r\n        <dd>Son los que no poseen un algoritmo. No es que no se conozca aun, sino que no existe algoritmo</dd>\r\n\r\n        <dt>Problemas Decidibles</dt>\r\n        <dd>Posee algoritmos, por lo que se pueden resolver mediante un programa (aunque aun no lo conozcamos)\r\n        <ul>\r\n            <li><em>Problemas Tratables (clase P)</em> Orden Polinomico o inferior</li>\r\n            <li><em>Problemas intratables (clase NP)</em> Orden exponencial o superior</li>\r\n            <li><em>Clase NP-Completa (NP-Duro)</em> son de la clase NP pero no de la clase P. (No se conoce solucion polinomica).</li>\r\n        </ul>\r\n        </dd>\r\n    </dl>\r\n</div>\r\n</template>","import { render } from \"./complejidad_tratabilidad.vue?vue&type=template&id=43453519\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div id=\"cuerpo\">\r\n    <h1>Lenguajes de Programacion</h1>\r\n\r\n    <h2>Tipos de Lenguajes</h2>\r\n\r\n    <dl>\r\n        <dt>Imperativos</dt>\r\n        <dd>Se dan una serie de instrucciones indicando COMO hacer lo que queremos</dd>\r\n\r\n        <dt>Declarativos</dt>\r\n        <dd>Se basan en el lenguaje natural y teniendo una base de conocimiento de fondo el lenguaje da un resultado lo que \"quiero HACER\"</dd>\r\n    </dl>\r\n\r\n    <h3>Lenguajes Imperativos</h3>\r\n    <p>Estan enfocados en el hardware por lo tanto los primeros lenguajes estan en codigo maquina</p>\r\n    \r\n    <ul>\r\n        <li><em>Ensamblador:</em> estan hechos en codigo maquina, son los primeros lenguajes imperativos su codigo es complejo y era dificil de integrar a otra maquina ya que estaban hechos a la medida. (lenguajes de bajo nivel)</li>\r\n        <li><em>Estructurados:</em> Se hace una extraccion y estan a la mitad del lenguaje natural. ya no depende de la maquina ya que se traduce el lenguaje a codigo maquina usando un compilador algunos lenguajes que se encuentran aqui son: C, Basic, Pascal, ADA, Cobol entre otros. se crean algunos paradismas que son Secuencia (se ejecuta en orden),Seleccion(condicionales y modificadores de flujo) y Iteradores (bucles), Datos Complejos(listas, arboles, registros), Funciones (crea un bloque de codigo para reutilizarlo) y Modulos(librerias). y son un lenguajes de alto nivel</li>\r\n        <li><em>Programacion Orientada a Objetos:</em> Aparecen nuevos conceptos como Objetos,Clases, Atrubutos, Metodos, Interfaces, Mensajes, Eventos, Encapsulado(Publico, Privado y Protegido), Herencia( Multiple, Polimorfismo, Clases Abstractas) algunos de los lenguajes que usan este paradigma son: C++, C#, JAVA, JavaScript, Python, Ruby</li>\r\n    </ul>\r\n\r\n    <h3>Lenguajes Declarativos</h3>\r\n\r\n    <ul>\r\n        <li><em>Funcionales(matematicas)</em></li>\r\n        <ul>\r\n            <li>Listas, Funciones(matematicas), Lambda y recursividad</li>\r\n            <li>Lisp, Scheme, Haskell</li>\r\n        </ul>\r\n        <li><em>Logicos (logicas de 1<sup>er</sup> Orden y Difusas</em></li>\r\n        <ul>\r\n            <li>Hechos, Reglas, Inferencias, Deducciones, Inducciones</li>\r\n            <li>Programas: Prolog, CLIPS, Fuzzy CLIPS</li>\r\n        </ul>\r\n        <li><em>Proposito Especifico</em></li>\r\n        <ul>\r\n            <li>Estadisticas: R</li>\r\n            <li>Bases de Datos: SQL</li>\r\n            <li>WEB: HTML, CSS</li>\r\n        </ul>\r\n    </ul>\r\n\r\n  </div>\r\n</template>","import { render } from \"./lenguajes_programacion.vue?vue&type=template&id=1aa76549\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div id=\"cuerpo\">\r\n    <h1>Presentacion</h1>\r\n    <p>Para poder realizar una buena inteligencia artificial se debe tener varias areas aprendidas las cuales son como requisito para entender los algoritmos de estas.</p>\r\n\r\n    <ul>\r\n        <li>Matematicas y Fisica</li>\r\n        <li>Informatica, redes e Internet</li>\r\n        <li>Programación, Bases de Datos y RegEx</li>\r\n        <li>Ingles</li>\r\n    </ul>\r\n\r\n    <h2>Inteligencia Artificial</h2>\r\n\r\n    <p>Ya que no existe una definicion formal para inteligencia es muy dificil dar una definicion de inteligencia artificial. y podemos encontrar en el libro de inteligencia artificial un enfoque moderno. que pueden existir cuatro enfoques que permiten responder a esta pregunta.</p>\r\n\r\n    <table class=\"table table-dark table-striped table-hover\">\r\n        <tr>\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\">Humano</th>\r\n            <th scope=\"col\">Racional</th>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Pensamiento(Interno)</td>\r\n            <td scope=\"row\">TEST DE TURING<br>Pensamiento como humanos</td>\r\n            <td scope=\"row\">LOGICA<br>Pensar Racionalmente</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Comportamiento (Externo)</td>\r\n            <td scope=\"row\">REDES NEURONALES<br>Comportarse como humanos</td>\r\n            <td scope=\"row\">AGENTES RACIONALES<br>Comportarse racionalmente</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <h3>Test de turing:</h3>\r\n\r\n    <p>Evalua que la IA pueda responder igual a un humano ya que el que evalua no puede decir si es una maquina o una persona la que esta respondiendo sus preguntas aunque no se suele crear maquinas que pasen el test porque es mas importante entender como funciona algo y no imitarlo, no se necesita imitar algo que vuele sino entender como es que vuelan para poder lograrlo. <q cite=\"inteligencia artificial un enfoque moderno\">construccion de maquinas que vuelen como palomas de forma que puedan incluso confundir a otras palomas.</q></p>\r\n\r\n    <h3>Redes Neuronales</h3>\r\n    <p>Este enfoque lo que intenta es comparar el comportamiento que existe al presentarse una situacion dada, y es evaluada a nivel psicologico y tiempos de reaccion similares a un humano, se usa el tema de redes neuronales ya que estas han dado buenos resultados en el comportamiento, la mejor opcion.</p>\r\n\r\n    <h3>Logica</h3>\r\n    <p>La manera correcta de pensar, siempre se llega a conclusiones correctas si se parte de premisas correctas. aun tiene dos grandes problemas que el mundo no se puede representar 100% en forma logica y que se necesita mucho poder computacional para solucionar problemas de una gran cantidad de datos.</p>\r\n\r\n    <h3>Agentes Racionales</h3>\r\n\r\n    <p>Un agente racional es aquel que actua con la intencion de alcanzar el mejor resultado posible en un tiempo optimo.</p>\r\n\r\n    <h2>Maquinas beneficiosas</h2>\r\n\r\n    <p>Es necesario tener presente que cada vez es mas dificil establecer el objetivo que queremos que cumpla la IA ya que al permitir que interactuen con el mundo real debemos permitir que la IA asuma un riesgo en actuar ejemplo la escena que nos plantea yo robot donde la unica forma de proteger a los humanos es encerandolos para que no sufran daño, igual pasa con los peligros de conducir, en si en cada proceso que se le deje tomar la decision a una maquina se comienza a tener el riesgo de lo que interpreta la maquina que es lo que queremos a lo que realmente queremos este problema se conoce como \"problema de alineacion de valores\" <q>No queremos maquinas que sean inteligentes en el sentido de perseguir sus objetivos, queremos que persigan nuestros objetivos</q></p>\r\n\r\n    <h2>Fundamentos de la IA</h2>\r\n\r\n    <p>las siguientes ramas han aportado en alguna medida al desarrollo de la inteligencia artificial.</p>\r\n\r\n    <ul>\r\n        <li>Filosofia\r\n            <ul>\r\n                <li>¿como se genera la inteligencia mental a partir de un cerebro fisico?</li>\r\n                <li>¿De donde viene el conocimiento?</li>\r\n                <li>¿como se pasa del conocimiento a la accion?</li>\r\n            </ul>\r\n        </li>\r\n        <li>Matematicas\r\n            <ul>\r\n                <li>¿que reglas formales son las adecuadas para obtener conclusiones validas?</li>\r\n                <li>¿que se puede computar?</li>\r\n                <li>¿como razonamos con informacion incierta?</li>\r\n            </ul>\r\n        </li>\r\n        <li>Economia\r\n            <ul>\r\n                <li>¿como se debe llevar a cabo el proceso de toma de decisiones para maximizar el rendimiento?</li>\r\n                <li>¿como se debe llevar a cabo acciones cuando otros no colaboren?</li>\r\n                <li>¿como se deb levar a cabo acciones cuando los resultados se obtienen en un futuro lejano?</li>\r\n            </ul>\r\n        </li>\r\n        <li>Neurociencia\r\n            <ul>\r\n                <li>¿como procesa informacion el cerebro?</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            Psicologia\r\n            <ul>\r\n                <li>¿como piensa y actuan los humanos y los animales?</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            Ingenieria computacional\r\n            <ul>\r\n                <li>¿como se puede construir un computador eficiente?</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            Teoria de control y cibernetica\r\n            <ul>\r\n                <li>¿como pueden los artefactos operar bajo su propio control?</li>\r\n            </ul>\r\n        </li>\r\n        <li>\r\n            Lingüistica\r\n            <ul>\r\n                <li>¿como esta relacionado el lenguaje con el pensamiento?</li>\r\n            </ul>\r\n        </li>\r\n    </ul>\r\n    <p>para la construccion de inteligencia artificial se ha basado en dos grandes enfoques el <em class=\"enfasis\">Bioinspirados</em> que uno de sus ejemplos son redes neuronales y algoritmos geneticos. y <em class=\"enfasis\">Matematicos</em> como grafos y busqueda, simbolicos: logica y Sistemas basados en Conocimientos(SBC), probabilisticos.\r\n    </p>\r\n\r\n    <h2>Areas de la IA</h2>\r\n\r\n    <ul>\r\n        <li>Busquedas</li>\r\n        <li>Representacion del conocimiento: simbolico, conexionista, mixto</li>\r\n        <li>Razonamiento: inductivo, deductivo, abductivo, analogo</li>\r\n        <li>Tratamiento de la incertidumbre</li>\r\n        <li>Planificacion</li>\r\n        <li>Toma de Decisiones</li>\r\n        <li>Aprendizaje: supervisado, No supervisado, por refuerzo.</li>\r\n    </ul>\r\n\r\n    <h2>Aplicaciones de la IA</h2>\r\n\r\n    <ul>\r\n        <li>Resolucion Automatica de problemas</li>\r\n        <li>Juegos</li>\r\n        <li>Mineria de Datos</li>\r\n        <li>Diagnostico</li>\r\n        <li>Prediccion</li>\r\n        <li>Procesamiento del lenguaje Natural</li>\r\n        <li>Percepcion</li>\r\n        <li>Robotica</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n","import { render } from \"./presentacion.vue?vue&type=template&id=144ebd40\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div id=\"cuerpo\">\r\n    <h1>Razonamiento y Aprendizaje</h1>\r\n    <p>algunos algoritmos que se pueden encontran en la programacion son los que manejan datos numericos ejemplo el tamaño de las hojas de una planta entre este grupo tenemos los conexionistas (grafos y redes) que se pueden representar en un formato grafico y los que manejan datos simbolicos ejemplo el color de las hojas de una planta y son usados en la logica como en nivel textual y el lenguaje formal.</p>\r\n    \r\n    <h2>Conecionistas</h2>\r\n\r\n    <p>El siguiente ejemplo es un grafo etiquetado y dirigido recordando que esto es una estructura.</p>\r\n    <img src=\"@/assets/imagenes/conocimientos_basicos/grafo1.svg\" alt=\"ejemplo de un grafo\">\r\n\r\n    <h2>Representacion Simbolica</h2>\r\n\r\n    <h3>Reglas</h3>\r\n\r\n    <p>En la logica tenemos que se representa por reglas, que son compuestas de antecedentes y Consecuente un ejemplo es el siguiente A es el padre de B y B es el padre de C si entonces A es el abuelo de C</p>\r\n\r\n    <math-jax latex=\"padre(A,B) padre(B,C) \\rightarrow abuelo(A,C)\" />\r\n\r\n    <h3>Hechos</h3>\r\n\r\n    <p>los hechos son cosas de la realidad que son representadas con las reglas</p>\r\n    \r\n    <math-jax latex=\"padre(Antonio, Bernardo) padre(Bernardo,Carlos) \\rightarrow abuelo(Antonio,Carlos)\" />\r\n    \r\n    <h2>Tipos de Razonamiento</h2>\r\n    <p>Existen cuatro tipos de razonamiento la cual se dan teniendo algunos datos ya sean los hechos, reglas o las consecuencias</p>\r\n\r\n    <math-jax latex=\"hechos + reglas \\rightarrow consecuencias\" />\r\n    \r\n    <table class=\"table table-dark table-striped table-hover\">\r\n        <tr>\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\">Hechos</th>\r\n            <th scope=\"col\">Reglas</th>\r\n            <th scope=\"col\">Consecuencias</th>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Deductivo</td>\r\n            <td scope=\"row\">Se tiene </td>\r\n            <td scope=\"row\">Se tiene </td>\r\n            <td scope=\"row\">Se obtiene</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Inductivo</td>\r\n            <td scope=\"row\">Se tiene</td>\r\n            <td scope=\"row\">Se obtiene</td>\r\n            <td scope=\"row\">Se tiene</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Abductivo</td>\r\n            <td scope=\"row\">Se obtiene</td>\r\n            <td scope=\"row\">Se tiene</td>\r\n            <td scope=\"row\">Se tiene</td>\r\n        </tr>\r\n        <tr>\r\n            <td scope=\"row\">Analogico (se basa en datos anteriores como categorizar los animales perro, gatos etc.)</td>\r\n            <td scope=\"row\">Se tiene</td>\r\n            <td scope=\"row\">No se tiene</td>\r\n            <td scope=\"row\">Se obtiene</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <h2>Tipos de Aprendizaje</h2>\r\n\r\n    <p>Si los ejemplos (instancias) con los que se va a realizar el aprendizaje tiene o no una etiqueta con la clase a la que pertenecen</p>\r\n    \r\n    <ul>\r\n        <li><em>Supervisado</em> ejemplos etiquetados</li>\r\n        <li><em>No supervidado</em> ejemplos NO etiquetados</li>\r\n        <li><em>Por Refuerzo (recompensa) </em>etiqueta a posteriori </li>\r\n    </ul>\r\n  </div>\r\n</template>","import { render } from \"./razonamiento_aprendizaje.vue?vue&type=template&id=eb34900e\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div id=\"cuerpo\">\r\n        <h1>Expresiones Regulares</h1>\r\n        <p>Son un conjunto de caracteres que generan un patron. que permite realizar busquedas de texto. validando si cumple el patron creado. cada expresion tiene un automata finito.</p>\r\n\r\n        <h2>Automata finito</h2>\r\n\r\n        <p>El Automata finito es un modelo computacional que tiene una entrada de datos y su correspondiente salida, pasando por varios estados dependiendo el patron al que deseamos encontrar ejemplo si se crea la expresion \"abc\" el automata finito sera el siguiente. donde solo se cumple cuando se pasa por todos los estados de a pasa a b y de b pasa a c y como no tiene otras condiciones solo funcionaria con esas tres letra y ignararia cualquier otro caracter que este despues del ultimo estado que es c</p>\r\n\r\n        <img src=\"@/assets/imagenes/conocimientos_basicos/automata_finito.svg\">\r\n\r\n        <h2>Anchors o limitadores</h2>\r\n\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">^</td>\r\n                <td scope=\"row\">Este simbolo nos permite indicarle que el texto debe iniciar con, algo a tener encuenta es que funciona con el inicio de un documento o el inicio de una linea o el inicio de un string.se puede usar de la siguiente manera. <br><em class=\"enfasis\">^Git</em><br>Se puede sacar con <kbd>alt</kbd>+<kbd>94</kbd></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;A</td>\r\n                <td scope=\"row\">Este simbolo nos permite indicarle que el texto debe iniciar con, algo a tener encuenta es que funciona con el inicio de un documento o el inicio de una linea o el inicio de un string.se puede usar de la siguiente manera. <br><em class=\"enfasis\">&#92;AGit</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$</td>\r\n                <td scope=\"row\">Este simbolo nos permite indicarle que el texto debe terminar con, algo a tener encuenta es que funciona con el final de un documento o el final de una linea o el final de un string.se puede usar de la siguiente manera. <br><em class=\"enfasis\">Git$</em><br>Se puede sacar con <kbd>alt</kbd>+<kbd>36</kbd></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;Z</td>\r\n                <td scope=\"row\">Este simbolo nos permite indicarle que el texto debe terminar con, algo a tener encuenta es que funciona con el final de un documento o el final de una linea o el final de un string.se puede usar de la siguiente manera. <br><em class=\"enfasis\">Git&#92;Z</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;b</td>\r\n                <td scope=\"row\">Nos permitr indicar que buscamos un limite de palabra <br>Se puede usar de la siguiente manera <br> <em class=\"enfasis\">Git&#92;b</em><br>la barra vertical se puede sacar con <kbd>alt</kbd>+<kbd>92</kbd></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;B</td>\r\n                <td scope=\"row\">Nos permitr indicar que buscamos cualquier caracter que no sea un limite de palabra <br>Se puede usar de la siguiente manera <br> <em class=\"enfasis\">Git&#92;B</em><br>la barra vertical se puede sacar con <kbd>alt</kbd>+<kbd>92</kbd></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;&#60;</td>\r\n                <td scope=\"row\">Nos permitr indicar que buscamos una palabra que inicie con un caracter especifico se puede usar <br> <em class=\"enfasis\">&#92;&#60;Git</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">&#92;&#62;</td>\r\n                <td scope=\"row\">Nos permitr indicar que buscamos una palabra que finalice con un caracter especifico se puede usar <br> <em class=\"enfasis\">Git&#92;&#62;</em></td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>Quantifiers o Cuantificadores</h2>\r\n\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">*</td>\r\n                <td scope=\"row\">Cero o mas veces. se usa de la siguiente manera<br><em class=\"enfasis\">a*</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">+</td>\r\n                <td scope=\"row\">uno o mas veces. se usa de la siguiente manera<br><em class=\"enfasis\">a+</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?</td>\r\n                <td scope=\"row\">cero o una vez<br><em class=\"enfasis\">a?</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">{#}</td>\r\n                <td scope=\"row\">Exactamente la cantidad escrita entre los corchetes<br><em class=\"enfasis\">a{3}</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">{#,}</td>\r\n                <td scope=\"row\">la cantidad escrita o mas veces<br><em class=\"enfasis\">a{3,}</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">{#,#}</td>\r\n                <td scope=\"row\">desde una cantidad minima hasta una cantidad maxima<br><em class=\"enfasis\">a{3,6}</em></td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>manera no codiciosa</h2>\r\n        <p>Las expresiones regulares trabajan de forma codiciosa opteniendo la mayor cantidad de texto que cumpla la condicion, suelen venir despues de un asterisco o del simbolo + para cambiar este comportamiento se tiene que colocar el simbolo <em class=\"enfasis\">?</em> despues de estos simbolos quedando de la siguiente manera <em class=\"enfasis\">a*?</em></p>\r\n        <h2>charater classes o Clases de caracteres</h2>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\c</td>\r\n                <td scope=\"row\">caracter de control<br> se usa <em class=\"enfasis\">\\c</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\s</td>\r\n                <td scope=\"row\">caracter de espacio puede ser tabulador, espacio <br> se usa <em class=\"enfasis\">\\s</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\S</td>\r\n                <td scope=\"row\">caracter que indica cualquier caracter diferentes a los de espacio <br> se usa <em class=\"enfasis\">\\S</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\d</td>\r\n                <td scope=\"row\">caracter que indica cualquier caracter numerico <br> se usa <em class=\"enfasis\">\\d</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\D</td>\r\n                <td scope=\"row\">caracter que indica que sea cualquier caracter No numerico <br> se usa <em class=\"enfasis\">\\D</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\w</td>\r\n                <td scope=\"row\">caracter que indica que buscamos un caracter de palabra los cuales estan compuestos por numeros, letras o _ <br> se usa <em class=\"enfasis\">\\w</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\W</td>\r\n                <td scope=\"row\">caracter que indica que No buscamos un caracter de palabra lo que indica cualquier caracter que no sean numeros, letras o _ <br> se usa <em class=\"enfasis\">\\W</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\x</td>\r\n                <td scope=\"row\">caracter para buscar un caracter de numeros hexadecimales<br> se usa <em class=\"enfasis\">\\x</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">\\O</td>\r\n                <td scope=\"row\">caracter para buscar un caracter de numeros Octaldecimal<br> se usa <em class=\"enfasis\">\\O</em></td>\r\n            </tr>\r\n        </table>\r\n        <h2>assertions o Aserciones</h2>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?=</td>\r\n                <td scope=\"row\">nos permite condicionar la expresion que estamos buscando que contenga algo a continuacion <br> se usa <em class=\"enfasis\">Vino(?=\\s\\w+)</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?!</td>\r\n                <td scope=\"row\">nos permite condicionar la expresion que estamos buscando que no continue con <br> se usa <em class=\"enfasis\">Java\\s(?!8|9)</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?&#60;=</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?!= or ?&#60;!</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?&#62;</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?()</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?()|</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">?#</td>\r\n                <td scope=\"row\"></td>\r\n            </tr>\r\n        </table>\r\n        <h2>conjuntos de caracteres y rangos</h2>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">.</td>\r\n                <td scope=\"row\">nos permite simbolizar cualquier caracter excepto nueva linea \\n <br> se usa <em class=\"enfasis\">.</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">|</td>\r\n                <td scope=\"row\">nos permite crear multiples secuencias de caracteres dandolo como \"o\", entonces se expresa como \"a\" o \"b\" <br> se usa <em class=\"enfasis\">ruben|dario</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">()</td>\r\n                <td scope=\"row\">agrupa toda la secuencia que esta dentro de los parentesis<br> se usa <em class=\"enfasis\">(ruben)</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">(?:)</td>\r\n                <td scope=\"row\">no cuenta este grupo osea ignora el dato que se crea en este grupo <br> se usa <em class=\"enfasis\">(?:regex)</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[]</td>\r\n                <td scope=\"row\">esto nos permite generar rangos o crear un grupo de caracteres que pueden aparecer <br>se usa <em class=\"enfasis\">[a-zA-Z0-9]</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[^.]</td>\r\n                <td scope=\"row\">Este niega los caracteres que estan dentro del rango lo que indica que no puede ir ningun caracter que esta en ese rango <br>se usa <em class=\"enfasis\">[^0-9]</em></td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>remplazo con grupos</h2>\r\n        <p>Al colocar parentesis se crea grupos y se comienza a contar desde uno para poder usarlos se usa <em class=\"enfasis\">$</em> o <em class=\"enfasis\">\\$</em> con el respectivo numero del grupo.</p>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$</td>\r\n                <td scope=\"row\">nos permite usar el string que coincide con los parametros de busqueda de un grupo espesifico<br>se usa <em class=\"enfasis\">$1</em></td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$`</td>\r\n                <td scope=\"row\">String Antes de la coincidencia</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$'</td>\r\n                <td scope=\"row\">String despues de la coincidencia</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$+</td>\r\n                <td scope=\"row\">ultima coincidencia</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">$&#38;</td>\r\n                <td scope=\"row\">Toda la coincidencia</td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>Banderas</h2>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">g</td>\r\n                <td scope=\"row\">nos permite realizar la busqueda de manera global</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">i</td>\r\n                <td scope=\"row\">nos permite realizar la busqueda ignorando si es mayuscula o minuscula</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">m</td>\r\n                <td scope=\"row\">nos permite realizar la busqueda por multiples lineas en un string que este separaado por lineas</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">s</td>\r\n                <td scope=\"row\">nos permite tratar un string como una sola linea</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">x</td>\r\n                <td scope=\"row\">permite comentarios y espacios en blanco en patron</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">e</td>\r\n                <td scope=\"row\">Evaluar el reemplazo</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">U</td>\r\n                <td scope=\"row\">patron no codicioso</td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h2>Posix</h2>\r\n        <table class=\"table table-dark table-striped table-hover\">\r\n            <tr>\r\n                <th scope=\"col\">Simbolo</th>\r\n                <th scope=\"col\">Descripcion</th>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:upper:]</td>\r\n                <td scope=\"row\">Mayusculas</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:lower:]</td>\r\n                <td scope=\"row\">Minusculas</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:alpha:]</td>\r\n                <td scope=\"row\">Todas las letras</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:alnum:]</td>\r\n                <td scope=\"row\">alfanumericos</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:digit:]</td>\r\n                <td scope=\"row\">numeros</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:xdigit:]</td>\r\n                <td scope=\"row\">numeros hexadecimales</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:punct:]</td>\r\n                <td scope=\"row\">puntuacion</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:blank:]</td>\r\n                <td scope=\"row\">espacio y tabulador</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:space:]</td>\r\n                <td scope=\"row\">espacio</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:cntrl:]</td>\r\n                <td scope=\"row\">caracteres de control</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:graph:]</td>\r\n                <td scope=\"row\">caracteres impresos</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:print:]</td>\r\n                <td scope=\"row\">caracteres impresos y espacios</td>\r\n            </tr>\r\n            <tr>\r\n                <td scope=\"row\">[:word:]</td>\r\n                <td scope=\"row\">digitos, letras y underscore</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n","import { render } from \"./regex.vue?vue&type=template&id=5bed9b2f\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div id=\"cuerpo\">\r\n        <h1>Logica</h1>\r\n\r\n        <h2>Logica Proposicional</h2>\r\n        <ul>\r\n            <li>Sintaxis y semantica: tablas de verdad</li>\r\n            <li>Base de conocimiento</li>\r\n            <li>Inferencia Logica Proposicional</li>\r\n            <li>Equivalencia, Validez y Satisfacibilidad</li>\r\n            <li>Resolucion y forma Normal Conjuntiva</li>\r\n            <li>Encadenamiento: Hacia Delante y Atras</li>\r\n            <li>Backtracking</li>\r\n            <li>Algoritmos de Busqueda Local</li>\r\n        </ul>\r\n\r\n        <h2>Logica de 1<sup>er</sup> orden</h2>\r\n        <ul>\r\n            <li>sintaxis y semantica: Cuantificadores</li>\r\n            <li>Reglas de Diagnostico y causales</li>\r\n            <li>Ingenieria del conocimiento</li>\r\n            <li>Inferencia Logica: Unificacion</li>\r\n            <li>Encadenamiento: Hacia Delante y Atras</li>\r\n            <li>Programacion Logica: prolog y CLIPS</li>\r\n            <li>Resolucion: Skolem</li>\r\n            <li>Agentes Logicos</li>\r\n        </ul>\r\n        <h2>Otras Logicas</h2>\r\n        <ul>\r\n            <li>Logica de orden superior</li>\r\n            <li>Logica modal</li>\r\n            <li>Logica Temporal</li>\r\n            <li>Logica no Monotonica</li>\r\n            <li>Logica por Defecto</li>\r\n            <li>Logica Difusa\r\n                <ul>\r\n                    <li>Conjuntos difusos</li>\r\n                    <li>Inferencia Difusa</li>\r\n                    <li>Fuzzy CLIPS</li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n        <h2>Representar el Conocimiento</h2>\r\n        <ul>\r\n            <li>Ingenieria del conocimiento: ontologias</li>\r\n            <li>Taxonomias: Categorias y Objetos</li>\r\n            <li>Acciones, Situaciones y eventos: Marcos</li>\r\n            <li>Eventos y Objetos mentales: creencias</li>\r\n            <li>Reglas, redes Semanticas y Logica Descriptiva</li>\r\n            <li>Razonomaniento por Defecto y No Monotonica</li>\r\n            <li>Incertidumbre y Factores de Certeza</li>\r\n            <li>Sistemas Expertos</li>\r\n            <li>Modelo Probabilista Racional</li>\r\n        </ul>\r\n        <h2>Planificacion</h2>\r\n        <ul>\r\n            <li>Algoritmos de planificacion: Strips y ADL</li>\r\n            <li>Espacio de Estados</li>\r\n            <li>Planificacion de orden parcial</li>\r\n            <li>Grafos de planificacion: Graphpl</li>\r\n            <li>Planificacion logica proposicional: Satplan</li>\r\n            <li>Redes jerarquicas de tareas</li>\r\n            <li>Panificacion condicional</li>\r\n            <li>Vigilancia de Ejecucion y Replanificacion</li>\r\n            <li>Planificacion continua y multiagente</li>\r\n        </ul>\r\n        <h2>Aprendizaje Inductivo</h2>\r\n        <ul>\r\n            <li>Tipos de Razonamiento y Aprendizaje</li>\r\n            <li>Arboles de Decision: ID3</li>\r\n            <li>Arboles de regresion: M5</li>\r\n            <li>Conjuntos de Hipotesis: Boosting</li>\r\n            <li>Listas de Decision: k-DL y K-DT</li>\r\n            <li>Mejor Hipotesis Actual</li>\r\n            <li>Espacio de Versiones y A<sup>Q</sup></li>\r\n            <li>Explicaciones e Informacion Relevante</li>\r\n            <li>Programacion Logica Inductiva: FOIL</li>\r\n        </ul>\r\n        <h2>Tratamiento Logico del Lenguaje</h2>\r\n        <ul>\r\n            <li>Gramaricas: Jerarquia de chomsky</li>\r\n            <li>Analisis Lexico</li>\r\n            <li>Analisis Sintactico</li>\r\n            <li>Analisis Semantico</li>\r\n            <li>Gramatica Causal Definida</li>\r\n            <li>Ambigüedad</li>\r\n            <li>Induccion Gramatical</li>\r\n        </ul>\r\n    </div>\r\n</template>","import { render } from \"./introduccion.vue?vue&type=template&id=6600a2df\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div id=\"cuerpo\">\r\n        <h1>Probabilidad</h1>\r\n\r\n        <h2>Conocimientos basicos</h2>\r\n\r\n        <ul>\r\n            <li>Incertidumbre</li>\r\n            <li>Probabilidad a priori</li>\r\n            <li>Probabilidad condicionada y normalizacion</li>\r\n            <li>Distribucion de probabilidad</li>\r\n            <li>Independencia Condicional</li>\r\n            <li>Regla de Bayes</li>\r\n        </ul>\r\n\r\n        <h2>Razonamiento Probabilistico</h2>\r\n\r\n        <ul>\r\n            <li>red bayesiana</li>\r\n            <li>regla de la cadena</li>\r\n            <li>manto de Markov</li>\r\n            <li>inferencia por enumeracion</li>\r\n            <li>Eliminacion de variables</li>\r\n            <li>Muestreo Directo y por Rechazo</li>\r\n            <li>Ponderacion de verosimilitud</li>\r\n            <li>Monte Carlo para Cadenas de Markov</li>\r\n        </ul>\r\n\r\n        <h2>Razonamiento Probabilistico en el tiempo</h2>\r\n\r\n        <ul>\r\n            <li>Procesos Estacionarios</li>\r\n            <li>Hipotesis de Markov: Procesos de Markov</li>\r\n            <li>Filtrado, Prediccion, Suavizado y Explicacion</li>\r\n            <li>Algoritmo Hacia Delante-Atras</li>\r\n            <li>Modelos Ocultos de Markov</li>\r\n            <li>Filtros de Kalman</li>\r\n            <li>Red Bayes. Dinamica: Filtrado de Particulas</li>\r\n            <li>Reconocimiento del Habla</li>\r\n        </ul>\r\n\r\n        <h2>Aprendizaje Probabilistico</h2>\r\n\r\n        <ul>\r\n            <li>Aprendizaje bayesiano</li>\r\n            <li>Naïve-Bayes</li>\r\n            <li>Algoritmo EM</li>\r\n            <li>Agrupamiento No Supervisado</li>\r\n            <li>Modelos de MArkov Ocultos</li>\r\n            <li>K-NN, K-medias y Clustering</li>\r\n            <li>Maquina de Vectores Soporte (Nucleo)</li>\r\n            <li>Aprendizaje profundo (Deep Learning)</li>\r\n        </ul>\r\n\r\n        <h2>Redes Neuronales</h2>\r\n\r\n        <ul>\r\n            <li>Computacion Neuronal</li>\r\n            <li>Funciones de Activacion</li>\r\n            <li>Perceptron, ADALINE y MANDALINE</li>\r\n            <li>Separabilidad Lineal</li>\r\n            <li>Redes Multicapa</li>\r\n            <li>Retropropagacion del Error</li>\r\n            <li>Mapas autoorganizados de Kohonen</li>\r\n            <li>Hamming, Hopfield, Hebb, Boltzmann, </li>\r\n        </ul>\r\n\r\n        <h2>Tratamiento Probabilistico del Lenguaje</h2>\r\n\r\n        <ul>\r\n            <li>Modelo Probabilistico del Lenguaje: Corpus</li>\r\n            <li>Gramaticas Probabilistico independiente del contexto</li>\r\n            <li>Gramaticas Probabilisticas Lexicalizadas</li>\r\n            <li>Recuperacion del Datos</li>\r\n            <li>Extraccion de Informacion</li>\r\n            <li>Traduccion Automatica Estadistica</li>\r\n        </ul>\r\n\r\n        <h2>Percepcion</h2>\r\n        <ul>\r\n            <li>Graficos por computador</li>\r\n            <li>Preprocesado: filtros</li>\r\n            <li>Deteccion de Aristas y Segmentacion</li>\r\n            <li>Texturas y Sombras</li>\r\n            <li>Reconocimiento de Objetos</li>\r\n            <li>Reconocimiento de Escritura</li>\r\n            <li>Etiquetados de Lineas</li>\r\n            <li>Movimiento</li>\r\n        </ul>\r\n\r\n        <h2>Robitica</h2>\r\n\r\n        <ul>\r\n            <li>Hardware Robotico: Sensores y Actuadores</li>\r\n            <li>Localizacion: Monte-Carlo</li>\r\n            <li>Generacion de mapas:SLAM</li>\r\n            <li>Movimiento: Espacio de configuracion</li>\r\n            <li>Cinematica Inversa</li>\r\n            <li>Incertidumbre</li>\r\n            <li>Dinamica y Control</li>\r\n            <li>Software Robotico</li>\r\n        </ul>\r\n    </div>\r\n</template>","import { render } from \"./introduccion.vue?vue&type=template&id=a507ebdc\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ruben\\\\Desktop\\\\cursos\\\\notas_curso_ia\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_hoisted_3","_createElementBlock","_hoisted_2","_hoisted_4","_createVNode","_component_math_jax","latex","script","__exports__","render","id","_hoisted_16","_hoisted_28","_hoisted_30","_hoisted_37","_hoisted_39","_hoisted_43","_hoisted_45","_hoisted_29","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_38","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_44","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_10","_hoisted_26","src","_imports_0","alt","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_17"],"sourceRoot":""}